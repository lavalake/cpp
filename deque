1. double ended queue
can insert at front or back. not nessesary contigouse memroy, so use pointer to offset may not work.
Vecotr guarantee contigouse memory allocation.

Specific libraries may implement deques in different ways, generally as some form of dynamic array. But in any case, 
they allow for the individual elements to be accessed directly through random access iterators, with storage handled 
automatically by expanding and contracting the container as needed.

Therefore, they provide a functionality similar to vectors, but with efficient insertion and deletion of elements 
also at the beginning of the sequence, and not only at its end. But, unlike vectors, deques are not guaranteed to 
store all its elements in contiguous storage locations: accessing elements in a deque by offsetting a pointer to 
another element causes undefined behavior.

Both vectors and deques provide a very similar interface and can be used for similar purposes, but internally 
both work in quite different ways: While vectors use a single array that needs to be occasionally reallocated 
for growth, the elements of a deque can be scattered in different chunks of storage, with the container keeping
the necessary information internally to provide direct access to any of its elements in constant time and with 
a uniform sequential interface (through iterators). Therefore, deques are a little more complex internally than 
vectors, but this allows them to grow more efficiently under certain circumstances, especially with very long 
sequences, where reallocations become more expensive.

For operations that involve frequent insertion or removals of elements at positions other than the beginning 
or the end, deques perform worse and have less consistent iterators and references than lists and forward lists.
