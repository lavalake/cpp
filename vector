Efficient way to erase an element from std::vector 
http://www.gamedev.net/topic/665250-efficient-way-to-erase-an-element-from-stdvector/
Normally you use move-semantics to avoid the copies (for non-trivial types). std::swap() handles that for you, though a single std::move() would work.

 

Here's my general function for swap-and-popping vectors:

//Swap-and-pop a specific element of a container, swapping the element with the element at the back of the container and then popping it off the stack.
//This does not preserve the order of the elements.
template<typename ContainerType>
void SwapAndPopAtIndex(ContainerType &container, size_t index)
{
	//Don't swap the back element with itself, and also don't swap out of range.
	/*
		The (index+1) is to prevent the back element from swapping with itself.

		This could be more clearly written as:	if(index >= (container.size()-1))
		...but since 'container.size()' is unsigned,
		the -1 would accidentally loop it around if size() returns 0, which is a likely occurance.
	*/
	if((index+1) >= container.size())
		return;

	//Swap the element with the back element.
	std::swap(container[index], container.back());

	//Pop the back of the container, deleting our old element.
	container.pop_back();
}


2.
Only slightly true: a std::set iterator is invalidated only if the item to which it refers is removed from the set: you can insert any item, and remove any item but one

3. find


If your vector is not ordered, use the approach MSN suggested:

if(std::find(vector.begin(), vector.end(), item)!=vector.end()){
      // Find the item
}

If your vector is ordered, use binary_search method Brian Neal suggested:

if(binary_search(vector.begin(), vector.end(), item)){
     // Find the item
}


binary search yields O(log n) worst-case performance, which is way more efficient than the first approach. In order to use binary search, you may use qsort to sort the vector first to guarantee it is ordered.



4. insert
   vector::insert(iterator, value)
   note: the first param is an iterator, not index
  
5. reverse
	no reverse method for vector. should use algorithm
	reverse(interator,iterator)
